CREATE TABLE Acct_Mstr( 
	AccNum number(10) PRIMARY KEY,
	Balance number(8)
);

INSERT INTO Acct_Mstr VALUES(
1,10000);
INSERT INTO Acct_Mstr VALUES(
2,2000);
INSERT INTO Acct_Mstr VALUES(
3,500);
INSERT INTO Acct_Mstr VALUES(
4,200);

DECLARE
	Num Acct_Mstr.AccNum%TYPE;
	bal Acct_Mstr.Balance%TYPE;
BEGIN
	Num:=:Num;
	select Balance INTO bal from Acct_Mstr where  AccNum=Num;
	
	IF bal>1000 THEN
		UPDATE Acct_Mstr SET Balance=bal-200 where AccNum=Num;
		DBMS_OUTPUT.PUT_LINE('Balance updated');
	ELSE
		DBMS_OUTPUT.PUT_LINE('Balance not updated');
	END IF;
END;


CREATE TABLE Circle_Data( 
	Radius number(7,2),
	Area number(7,2)
);

DECLARE
	Radius Circle_Data.Radius%TYPE;
	Area Circle_Data.Area%TYPE;
BEGIN
    << main_loop >> 
	FOR i IN 3..7 LOOP
        INSERT INTO Circle_Data VALUES(i,(3.14159*i*i));
    END loop main_loop; 
    FOR i IN 3..7 LOOP
        select Radius,Area INTO Radius,Area from Circle_Data where Radius=i;
        DBMS_OUTPUT.PUT_LINE('Radius ' || Radius || ' Area ' || Area);
    END loop main_loop;
END;


CREATE TABLE Bank( 
	AccNum number(10) PRIMARY KEY,
	Balance number(8)
);
INSERT INTO Bank VALUES(1,10000);
INSERT INTO Bank VALUES(2,20000);
INSERT INTO Bank VALUES(3,50000);
INSERT INTO Bank VALUES(4,2320);

DECLARE
    count_data number(3);
    Acc_Num Bank.AccNum%TYPE;
    Current_Balance Bank.Balance%TYPE;
	Money number(8);
BEGIN
	SAVEPOINT starting_transaction;
    select count(*) INTO count_data from Bank;
    << main_loop >> 
	FOR i IN 1..count_data LOOP
        select AccNum,Balance INTO Acc_Num,Current_Balance from Bank where AccNum=i;
        DBMS_OUTPUT.PUT_LINE('Acc_Num ' || Acc_Num || ' Current_Balance ' || Current_Balance);

        UPDATE Bank SET Balance=Current_Balance-1500 where AccNum=i;
		DBMS_OUTPUT.PUT_LINE('Withdraw 1500');
        select AccNum,Balance INTO Acc_Num,Current_Balance from Bank where AccNum=i;
        DBMS_OUTPUT.PUT_LINE('Acc_Num ' || Acc_Num || ' Current_Balance ' || Current_Balance);

        UPDATE Bank SET Balance=Current_Balance+50000 where AccNum=i;
		DBMS_OUTPUT.PUT_LINE('Desposited 50,000');
        select AccNum,Balance INTO Acc_Num,Current_Balance from Bank where AccNum=i;
        DBMS_OUTPUT.PUT_LINE('Acc_Num ' || Acc_Num || ' Current_Balance ' || Current_Balance);
    END loop main_loop;
	
	select SUM(Balance) INTO Money from Bank;
	
	IF Money>6000000 THEN
		ROLLBACK WORK TO SAVEPOINT starting_transaction;
		DBMS_OUTPUT.PUT_LINE('Balance exceeded limit, Reverting Transaction.');
	ELSE
		DBMS_OUTPUT.PUT_LINE('Balance updated for all accounts.');
	END IF;
END;


DECLARE
	Input number(8);
	RevInput number(8);
BEGIN
	Input:=:Input;
    RevInput:=0;
    WHILE Input>0 LOOP
        RevInput:=(RevInput*10) + mod(Input,10); 
        Input:=floor(Input/10); 
    END LOOP; 

    DBMS_OUTPUT.PUT_LINE('Reverse ' || RevInput);
    
END;

CREATE TABLE Accounts( 
	AccNo number(10) PRIMARY KEY,
	NameHolder varchar(16),
	Address varchar(16),
	PANNo number(12),
	Mobile number(10),
	Status varchar(8),
	balance number(8),
	lastTransaction DATE
);
CREATE TABLE InactiveAccounts( 
	AccNo number(10) PRIMARY KEY,
	Balance number(8)
);
INSERT INTO Accounts VALUES(1,'Abhinav','Delhi',25475,6348,'Active',9000,TO_DATE('2011/04/22', 'yyyy/mm/dd') );
INSERT INTO Accounts VALUES(2,'Rahul','Delhi',25475,6348,'Active',90900,TO_DATE('2020/02/19', 'yyyy/mm/dd') );
INSERT INTO Accounts VALUES(3,'Max','Delhi',25475,6348,'Active',9680,TO_DATE('2020/06/20', 'yyyy/mm/dd') );
INSERT INTO Accounts VALUES(4,'Lisa','Delhi',25475,6348,'Active',908,TO_DATE('2022/02/21', 'yyyy/mm/dd') );
DECLARE
    CURSOR c1 IS SELECT AccNo, NameHolder, lastTransaction, Balance, Status FROM Accounts WHERE SYSDATE-lastTransaction>180;
BEGIN
    FOR row_c1 IN c1
    LOOP
        UPDATE Accounts SET Status = 'Inactive' WHERE accno=row_c1.accno;
        INSERT INTO InactiveAccounts(accno,  Balance) VALUES(row_c1.accno, row_c1.balance);
    END LOOP;
END;
SELECT * FROM Accounts;
SELECT * FROM InactiveAccounts;

DECLARE
	updateNum number(8);
	count_data number(3);
	balance number(8);
	city varchar(16);
	CURSOR c1 IS SELECT AccNo, Address, balance Status FROM Accounts WHERE Address='Delhi';
BEGIN
	updateNum:=0;
	select count(*) INTO count_data from Accounts;
	FOR row_c1 IN c1 LOOP
		UPDATE Accounts SET Balance = Balance+100 WHERE AccNo=row_c1.AccNo;
		updateNum:=updateNum+1;
    END loop;
	DBMS_OUTPUT.PUT_LINE('Records Updated: ' || updateNum);
END;

CREATE TABLE EMPLOYEE( 
    EMPName varchar(16),
    DateOfBirth DATE,
    Designation varchar(16),
    Salary number(7,2)
);

INSERT INTO EMPLOYEE VALUES(
'Abhinav', TO_DATE('2022/06/26', 'yyyy/mm/dd'),'CEO',9000);
INSERT INTO EMPLOYEE VALUES(
'Afssfav', TO_DATE('2022/06/26', 'yyyy/mm/dd'),'CEO',9000);
INSERT INTO EMPLOYEE VALUES(
'Adav', TO_DATE('2022/06/26', 'yyyy/mm/dd'),'CEO',9000);

DECLARE
	CURSOR c1 IS SELECT EMPName, DateOfBirth, Designation FROM EMPLOYEE WHERE Salary>15000;
    count_item number(3);
BEGIN
    count_item:=0;
	FOR row_c1 IN c1 LOOP
        count_item:=count_item+1;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE: ' || row_c1.EMPName || ' ' || row_c1.DateOfBirth || ' ' || row_c1.Designation);
    END loop;
    IF count_item=0 THEN
        raise_application_error(-20001,' ');
    END IF;
EXCEPTION 
   WHEN others THEN
      DBMS_OUTPUT.PUT_LINE('No emp with salary higer then 15000');
END;

// TRIGGER
CREATE TABLE EMPLOYEE_MASTER( 
    EMPID number(8),
    EMPName varchar(16)
);

CREATE TABLE EMPLOYEE_BACKUP( 
    EMPID number(8),
    EMPName varchar(16)
);

INSERT INTO EMPLOYEE_MASTER VALUES(1,'Abhinav');
INSERT INTO EMPLOYEE_MASTER VALUES(2,'Kumar');

CREATE OR REPLACE TRIGGER Data_Backup 
BEFORE 
    DELETE OR UPDATE 
ON EMPLOYEE_MASTER
FOR EACH ROW
BEGIN
    CASE
        WHEN UPDATING THEN
            INSERT INTO EMPLOYEE_BACKUP VALUES(:OLD.EMPID, :OLD.EMPName);
        WHEN DELETING THEN
            INSERT INTO EMPLOYEE_BACKUP VALUES(:OLD.EMPID, :OLD.EMPName);
    END CASE; 
END;

UPDATE EMPLOYEE_MASTER SET EMPName = 'Master' WHERE EMPID=1;
DELETE FROM EMPLOYEE_MASTER WHERE EMPID <> 1;
select * from EMPLOYEE_MASTER;
select * from employee_backup;

DROP TABLE EMPLOYEE_MASTER;
CREATE TABLE EMPLOYEE_MASTER( 
    EMPID number(8),
    EMPName varchar(16)
);

CREATE TABLE EMPLOYEE_BACKUP_MASTER( 
    EMPID number(8),
    EMPName varchar(16)
);

CREATE OR REPLACE TRIGGER Data_Deleter
BEFORE 
    INSERT OR 
    UPDATE OF EMPID, EMPName OR
    DELETE
ON EMPLOYEE_MASTER
FOR EACH ROW
BEGIN
    CASE
        WHEN INSERTING THEN
            INSERT INTO EMPLOYEE_BACKUP_MASTER VALUES(:NEW.EMPID, :NEW.EMPName);
        WHEN UPDATING('EMPID') THEN
            UPDATE EMPLOYEE_BACKUP_MASTER SET EMPID = :NEW.EMPID WHERE EMPID= :OLD.EMPID;
        WHEN UPDATING('EMPName') THEN
            UPDATE EMPLOYEE_BACKUP_MASTER SET EMPName = :NEW.EMPName WHERE EMPName= :OLD.EMPName;
        WHEN DELETING THEN
            DELETE FROM EMPLOYEE_BACKUP_MASTER WHERE EMPName= :OLD.EMPName;
    END CASE; 
END;

INSERT INTO EMPLOYEE_MASTER VALUES(1,'Abhinav');
INSERT INTO EMPLOYEE_MASTER VALUES(2,'Kumar');
UPDATE EMPLOYEE_MASTER SET EMPID = 11 WHERE EMPID = 1;
DELETE FROM EMPLOYEE_MASTER WHERE EMPID= 2;
select * from EMPLOYEE_BACKUP_MASTER;